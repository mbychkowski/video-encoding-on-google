# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

main:
    params: [event]
    steps:
        - init:
            assign:
            - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
            - encoding_id: '${"encoding-" + sys.get_env("GOOGLE_CLOUD_WORKFLOW_EXECUTION_ID")}'
            - bucket_name_primary: '${"bkt-" + (encoding_id) + "-primary"}'
            - bucket_name_backup: '${"bkt-" + (encoding_id) + "-backup"}'
            - docker_repo_uri: ${sys.get_env("DOCKER_REPO_URI")}
            - image_version: "encoder:v0.1"
            - base64: ${base64.decode(event.data.message.data)}
            - message: ${json.decode(base64)}
            - event_id: ${message.eventId}
            - location: ${message.region}
            - gke_cluster_name: test-cluster # '${(sys.get_env("GKE_NAME")) + "-" + (location)}'
        - parallel_deployment:
            parallel:
                branches:
                - primary:
                    steps:
                    - create_bucket_primary:
                        call: googleapis.storage.v1.buckets.insert
                        args:
                            project: ${project_id}
                            body:
                                name: ${bucket_name_primary}
                    - label_bucket_primary:
                        call: googleapis.storage.v1.buckets.update
                        args:
                            bucket: ${bucket_name_primary}
                            body:
                                labels:
                                    event: ${event_id}
                                    backup: "false"
                    - run_encoder_primary:
                        call: gke.request
                        args:
                            project: ${project_id}
                            location: ${location}
                            cluster_id: ${gke_cluster_name}
                            method: "POST"
                            path: "/apis/apps/v1/namespaces/encoder-test/deployments"
                            body:
                                kind: Deployment
                                metadata:
                                  name: '${(encoding_id) + "-primary"}'
                                  labels:
                                    name: encoder
                                    version: stable
                                    backup: "false"
                                    event: ${event_id}
                                spec:
                                  replicas: 1
                                  selector:
                                    matchLabels:
                                      event: ${event_id}
                                  template:
                                    metadata:
                                      labels:
                                        name: encoder
                                        version: stable
                                        backup: "false"
                                        event: ${event_id}
                                      annotations:
                                        gke-gcsfuse/volumes: "true"
                                        gke-gcsfuse/ephemeral-storage-limit: "0"
                                        gke-gcsfuse/cpu-limit: "0"
                                        gke-gcsfuse/memory-limit: "0"
                                        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
                                    spec:
                                      restartPolicy: Always
                                      serviceAccountName: ksa-wi-encoder
                                      terminationGracePeriodSeconds: 15
                                      nodeSelector:
                                        cloud.google.com/machine-family: n2d
                                        cloud.google.com/compute-class: Performance
                                        # cloud.google.com/gke-spot: "true"
                                      containers:
                                      - image: '${(docker_repo_uri) + "/" + (image_version)}'
                                        name: encoder
                                        imagePullPolicy: Always
                                        ports:
                                        - name: udp
                                          containerPort: 5000
                                          protocol: UDP
                                        env:
                                        - name: ENV
                                          value: dev
                                        - name: OUTPUT_BUCKET
                                          value: ${bucket_name_primary}
                                        - name: RESOLUTION
                                          value: "1080"
                                        - name: OUTPUT_PATH
                                          value: "/output"
                                        - name: OUTPUT_BASE
                                          value: "ffmpeg-test"
                                        - name: OUTPUT_PAD
                                          value: "%06d"
                                        - name: OUTPUT_EXT
                                          value: "ts"
                                        - name: SENDER_ADDR
                                          value: '${(message.truckOriginIp) + ":5000"}'
                                        resources:
                                          requests:
                                            cpu: 6
                                            memory: 6Gi
                                            ephemeral-storage: 100Gi
                                          limits:
                                            memory: 16Gi
                                            ephemeral-storage: 100Gi
                                        volumeMounts:
                                        - name: gcs-fuse-csi-output
                                          mountPath: "/output"
                                      volumes:
                                      - name: gcs-fuse-cache
                                        emptyDir:
                                          medium: Memory
                                      - name: gcs-fuse-csi-output
                                        csi:
                                          driver: gcsfuse.csi.storage.gke.io
                                          volumeAttributes:
                                            bucketName: ${bucket_name_primary}
                                            mountOptions: "implicit-dirs"
                                            disableMetrics: "false"
                                            enableStreamingWrites: "true"
                - backup:
                    steps:
                    - create_bucket_backup:
                        call: googleapis.storage.v1.buckets.insert
                        args:
                            project: ${project_id}
                            body:
                                name: ${bucket_name_backup}
                    - label_bucket_backup:
                        call: googleapis.storage.v1.buckets.update
                        args:
                            bucket: ${bucket_name_backup}
                            body:
                                labels:
                                    event: ${event_id}
                                    backup: "true"
                    - run_encoder_backup:
                        call: gke.request
                        args:
                            project: ${project_id}
                            location: ${location}
                            cluster_id: ${gke_cluster_name}
                            method: "POST"
                            path: "/apis/apps/v1/namespaces/encoder-test/deployments"
                            body:
                                kind: Deployment
                                metadata:
                                  name: '${(encoding_id) + "-backup"}'
                                  labels:
                                    name: encoder
                                    version: stable
                                    backup: "true"
                                    event: ${event_id}
                                spec:
                                  replicas: 1
                                  selector:
                                    matchLabels:
                                      event: ${event_id}
                                  template:
                                    metadata:
                                      labels:
                                        name: encoder
                                        version: stable
                                        backup: "true"
                                        event: ${event_id}
                                      annotations:
                                        gke-gcsfuse/volumes: "true"
                                        gke-gcsfuse/ephemeral-storage-limit: "0"
                                        gke-gcsfuse/cpu-limit: "0"
                                        gke-gcsfuse/memory-limit: "0"
                                        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
                                    spec:
                                      restartPolicy: Always
                                      serviceAccountName: ksa-wi-encoder
                                      terminationGracePeriodSeconds: 15
                                      nodeSelector:
                                        cloud.google.com/machine-family: n2d
                                        cloud.google.com/compute-class: Performance
                                        # cloud.google.com/gke-spot: "true"
                                      containers:
                                      - image: '${(docker_repo_uri) + "/" + (image_version)}'
                                        name: encoder
                                        imagePullPolicy: Always
                                        ports:
                                        - name: udp
                                          containerPort: 5000
                                          protocol: UDP
                                        env:
                                        - name: ENV
                                          value: dev
                                        - name: OUTPUT_BUCKET
                                          value: ${bucket_name_backup}
                                        - name: RESOLUTION
                                          value: "1080"
                                        - name: OUTPUT_PATH
                                          value: "/output"
                                        - name: OUTPUT_BASE
                                          value: "ffmpeg-test"
                                        - name: OUTPUT_PAD
                                          value: "%06d"
                                        - name: OUTPUT_EXT
                                          value: "ts"
                                        - name: SENDER_ADDR
                                          value: '${(message.truckOriginIp) + ":5001"}'
                                        resources:
                                          requests:
                                            cpu: 6
                                            memory: 6Gi
                                            ephemeral-storage: 100Gi
                                          limits:
                                            memory: 16Gi
                                            ephemeral-storage: 100Gi
                                        volumeMounts:
                                        - name: gcs-fuse-csi-output
                                          mountPath: "/output"
                                      volumes:
                                      - name: gcs-fuse-cache
                                        emptyDir:
                                          medium: Memory
                                      - name: gcs-fuse-csi-output
                                        csi:
                                          driver: gcsfuse.csi.storage.gke.io
                                          volumeAttributes:
                                            bucketName: ${bucket_name_backup}
                                            mountOptions: "implicit-dirs"
                                            disableMetrics: "false"
                                            enableStreamingWrites: "true"
        - return_pubsub_message:
            return: ${message}
